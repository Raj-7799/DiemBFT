diff --git a/src/mempool.py b/src/mempool.py
index 56ce71d..5e56cf9 100644
--- a/src/mempool.py
+++ b/src/mempool.py
@@ -6,37 +6,63 @@ diem_logger = get_logger(os.path.basename(__file__))
 
 
 class MemPool:
-    def __init__(self):
+    def __init__(self, OutputMempool):
         self.queue = deque([])
-        self.locator = {}
+        self.commited_blocks = set()
+        self.OutputMempool = OutputMempool
     
     def get_transactions(self):
         # currently only sends one transaction
-        if self.queue:
+        if self.queue and self.queue[0] not in self.commited_blocks:
             command = self.queue.popleft()
-            if command in self.locator:
-                return command
-            else:
-                self.get_transactions()
+            self.OutputMempool("[get_transactions] Exit with command {} from queue  ".format(command))
+            return command
         else:
-            return None
+            self.OutputMempool("[get_transactions] Exit queue empty ")
+            return EmptyRequest()
 
-    def insert_command(self, command, client):
-        if command not in self.locator:
+    def markState(self, command):
+        if command in self.queue:
+            self.OutputMempool("[get_transactions] Removing command {} from queue ".format(command))
+            self.queue.remove(command)
+    
+    def insert_command(self, command):
+        if command not in self.commited_blocks and command not in self.queue:
             self.queue.append(command)
-            self.locator[command] = client
+            self.OutputMempool("[insert_command] command {}".format(command))
+        else:
+            self.OutputMempool("[insert_command] Command already present in mempool")
 
     def delete_command(self, command):
-        print("Delete {} from Mempool".format(command))
-        if command in self.locator:
-            print("Delete {} from Mempool Successfull".format(command))
-            del self.locator[command]
+        self.commited_blocks.add(command)
+        self.markState(command)
 
     def remove_transaction(self, command):
         self.delete_command(command)
+    
+    def __str__(self):
+        output = []
+        output.append("MemPool : Queue [ ")
+
+        for q in self.queue:
+            output.append("{}, ".format(str(q)))
+        
+        output.append(" ]")
+
+        output.append(" Commited Blocks [ ")
+
+        for q in list(self.commited_blocks):
+            output.append("{}, ".format(str(q)))
+        
+        output.append(" ]")
+        return "".join(output)
+
 
-    def validate_command(self, command):
-        return command in self.locator
+class EmptyRequest():
+    def  __init__(self):
+        self.payload = "empty"
+        self.source = None
+        self.signature = "NoSignature"
     
     def __str__(self):
-        return "{} {}".format(self.queue, self.locator)
\ No newline at end of file
+        return self.payload
