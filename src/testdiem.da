from GenerateKey import GenerateKey
from Keys import Keys
from client import Client
import diem_replica
from replica_info import ReplicaInfo
from client_info import ClientInfo
import sys
from tabulate import tabulate
import plyvel
import pickle
import shutil
import glob
import diem_replica_forge
import diem_replica_omission
import diem_replica_delay
import diem_replica_proposalDrop
import diem_replica_proposalDelay
import diem_replica_proposalDropTimeoutDelay
import diem_replica_voteDrop
import diem_replica_setAttrFailure
import diem_replica_multiple

class RunDiemBFT(process): 
  def setup(config:dict): 
      self.faulty_replicas   = config["faultyReplicas"]
      self.replicas_required = 3 * faulty_replicas + 1
      self.delta             = config["timeoutDelta"]
      self.clientNo          = config["clients"]
      self.requests          = config["requests"]
      self.clientTimeout     = config["clientTimeout"]
      self.scenario          = config["testcase"]['type']
      #output("Type is {}".format(config["testcase"]['type']))
      self.specialArguments = config["testcase"]['specialArguments']


  def getReplicafromConfiguration(scenario):
    if scenario == "omission":
      return new(diem_replica_omission.Replica_Omission), self.specialArguments
    elif scenario == "normal":
      return new(diem_replica.Replica), {}
    elif scenario == "forge_signature":
      return new(diem_replica_forge.Replica_forged), self.specialArguments
    elif scenario == "delay":
      return new(diem_replica_delay.Replica_Delay), self.specialArguments 
    elif scenario == "ProposalDrop":
      return new(diem_replica_proposalDrop.Replica_Drop), self.specialArguments 
    elif scenario == "ProposalDelay":
      return new(diem_replica_proposalDelay.Replica_Delay), self.specialArguments 
    elif scenario == "ProposalDropTimeoutDelay":
      return new(diem_replica_proposalDropTimeoutDelay.Replica_Drop_Delay), self.specialArguments 
    elif scenario == "VoteDrop":
      return new(diem_replica_voteDrop.Replica_VoteDrop), self.specialArguments
    elif scenario == "SetAttrFailure":
      return new(diem_replica_setAttrFailure.Replica_setAttrFailure), self.specialArguments
    elif scenario in ["proposaldroptwice" ,"votedelay","probablisticdrop"]:
      return new(diem_replica_multiple.Replica_Multiple_Failure), self.specialArguments
        
  def run():
    output("Creating {} DiemBFT Replicas".format(self.replicas_required))

    clients = new(Client, num=self.clientNo)
    output("Generating keys ")
    GenerateKey(self.replicas_required + 1).write_config()
    KeySets = [ Keys(i) for i in range(self.replicas_required + 1)]
    
    replicas = []
    replicaInfos = {}
    replicaToPvtKeys = {}
    clientInfo = {}
    current_runner_process = self
    specialArgs = {}
    
    i = 0
    # replicas where network plays a heavy role
    
    if self.scenario in ["ProposalDrop", "ProposalDelay", "ProposalDropTimeoutDelay", "VoteDrop", "SetAttrFailure", "probablisticdrop", "votedelay", "proposaldroptwice"]:
      while i < replicas_required:
        replica, special = self.getReplicafromConfiguration(self.scenario)
        specialArgs[i] = special
        replicas.append(replica)
        i += 1
    else:
      while i < self.faulty_replicas:
        replica, special = self.getReplicafromConfiguration(self.scenario)
        specialArgs[i] = special
        replicas.append(replica)
        i += 1
      
      # spawning normal replicas
      while i < replicas_required:
        replica, special = self.getReplicafromConfiguration("normal")
        specialArgs[i] = special
        replicas.append(replica)
        i += 1

    # iterate through replicas and generate metadata
    for i, replica in enumerate(replicas):
      KeySet = KeySets[i]
      replicaInfos[replica] = ReplicaInfo(replica, KeySet.public_key, i)
      replicaToPvtKeys[i] = KeySet.private_key

    # iterate through clients and generate metadata
    for i in clients:
      clientInfo[i] = ClientInfo(KeySets[-1].public_key, i)

    # perform setup for each replica
    for i, replica in enumerate(replicas):
      setup(replica, (
            i,
            replicaInfos, 
            self.faulty_replicas, 
            self.replicas_required,
            self.delta,
            replicaToPvtKeys[i],
            clientInfo,
            specialArgs[i]
        ))

    # start replicas
    start(replicas)

    # setup clients
    for i, client in enumerate(clients):
      setup(client, (
        i,
        self.requests,
        self.clientTimeout,
        replicaInfos,
        KeySets[-1].private_key,
        KeySets[-1].public_key,
        self.faulty_replicas,
        current_runner_process
      ))
    
    # start clients
    start(clients)

    # wait for clients to exit
    await(self.clientNo == 0)

    # once clients have stopped, send client_end messages to replica in-order for them to stop
    for _,replicaInfo in replicaInfos.items():
      output("sending close message to replica {}".format(replicaInfo.replicaID))
      send(("client_end"), to=replicaInfo.process)

  def receive(msg=("client_done",), from_=source):
    output("Received client done message ")
    self.clientNo -= 1



def getConfigs():
  configs = [
    {
      'Name': "0. Normal Replicas",
      'faultyReplicas': 1,
      'timeoutDelta': 2500,
      'clients': 1,
      'requests': 10,
      'clientTimeout': 5,
      'testcase': {
        "type": "normal",
        "specialArguments": {}
      }
    },
    {
      'Name': "1. Normal Replicas with multiple clients",
      'faultyReplicas': 1,
      'timeoutDelta': 2500,
      'clients': 2,
      'requests': 10,
      'clientTimeout': 5,
      'testcase': {
        "type": "normal",
        "specialArguments": {}
      }
    },
    {
      'Name': "2. Client small timeout with request resubmission and handling de-deuplication",
      'faultyReplicas': 1,
      'timeoutDelta': 2500,
      'clients': 1,
      'requests': 10,
      'clientTimeout': 0.5,
      'testcase': {
        "type": "normal",
        "specialArguments": {}
      }
    },
    {
      'Name': "3. Faulty replica having omission failures",
      'faultyReplicas': 1,
      'timeoutDelta': 2500,
      'clients': 1,
      'requests': 5,
      'clientTimeout': 5,
      'testcase': {
        "type": "omission",
        "specialArguments": {}
      }
    },
    {
      'Name': "4. Forge signature",
      'faultyReplicas': 1,
      'timeoutDelta': 500,
      'clients': 1,
      'requests': 5,
      'clientTimeout': 2,
      'testcase': {
        "type": "forge_signature",
        "specialArguments": {
          "forge": True,
          "faulty_signature": "diembft"
        }
      }
    },
    {
      "Name": "5. Faulty replicas having delay failures",
      "faultyReplicas": 1,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "delay",
        "specialArguments": {
          "randomSeed": 50,
          "faulty_round": 1,
          "start": 4,
          "end": 7
        }
      }
    },
    {
      "Name": "6. Proposal Messages Dropped at validators 1 and 2",
      "faultyReplicas": 1,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "ProposalDrop",
        "specialArguments": {
          "faultyRound": 2
        }
      }
    },
    {
      "Name": "7. Proposal Messages Delayed at validators 1 and 2 and 5",
      "faultyReplicas": 2,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "ProposalDelay",
        "specialArguments": {
          "randomSeed": 50,
          "faultyRound": 2
        }
      }
    },
    {
      "Name": "8. Proposal Drop and Timeout Delay in round 3",
      "faultyReplicas": 2,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "ProposalDropTimeoutDelay",
        "specialArguments": {
          "randomSeed": 50,
          "faultyRound": 2
        }
      }
    },
    {
      "Name": "9. Vote Message drop for round 3",
      "faultyReplicas": 2,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "VoteDrop",
        "specialArguments": {
          "randomSeed": 50,
          "faultyRound": 2
        }
      }
    },
    {
      "Name": "10. SetAttrFailure",
      "faultyReplicas": 2,
      "timeoutDelta": 2500,
      "clients": 1,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "SetAttrFailure",
        "specialArguments": {
          "randomSeed": 50,
          "faultyCurrentRound": 4
        }
      }
    },
    {
      "Name": "11. Proposal drop twice",
      "faultyReplicas": 1,
      "timeoutDelta": 2500,
      "clients": 5,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "proposaldroptwice",
        "specialArguments": {
          "rounds": [
            3,
            4
          ],
          "validator": [
            4
          ],
          "subtype": "proposaldrop"
        }
      }
    },
    {
      "Name": "12. Vote delay twice",
      "faultyReplicas": 1,
      "timeoutDelta": 2500,
      "clients": 5,
      "requests": 5,
      "clientTimeout": 5,
      "testcase": {
        "type": "votedelay",
        "specialArguments": {
          "rounds": [
            2,
            3
          ],
          "validator": [
            1,
            3
          ],
          "subtype": "votedelay",
          "randomSeed": 50,
          "start": 4,
          "end": 7
        }
      }
    },
    {
      "Name": "13. Probabilistic Drop with f=2:",
      "faultyReplicas": 2,
      "timeoutDelta": 2500,
      "clients": 5,
      "requests": 20,
      "clientTimeout": 5,
      "testcase": {
        "type": "probablisticdrop",
        "specialArguments": {
          "rounds": [
            2,
            3,
            5,
            6,
            8,
            9
          ],
          "subtype": "probablisticdrop",
          "randomSeed": 1234567,
          "start": 4,
          "end": 7,
          "probability": 0.15
        }
      }
    }
  ]

  return configs[0]


def main():
  config(clock='Lamport')
  config(channel='fifo')
  configs = [getConfigs()]
  print("configuration ",configs)
  for configuration in configs:
    output("Processing configuration: {}".format(configuration))
    runner = new(RunDiemBFT)
    setup(runner, (configuration,))
    start(runner)