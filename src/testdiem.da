from GenerateKey import GenerateKey
from Keys import Keys
from client import Client
import diem_replica
import diem_replica_byz
from replica_info import ReplicaInfo
from client_info import ClientInfo
import sys
from tabulate import tabulate
import plyvel
import pickle
import shutil
import glob
print(sys.path)


import os
from diembft_logger import get_logger

diem_logger = get_logger(os.path.basename(__file__))

class RunDiemBFT(process): 
  def setup(config:dict): 
      self.faulty_replicas   = config['faultyReplicas']
      self.replicas_required = 3 * faulty_replicas + 1
      self.delta             = config['timeoutDelta']
      self.clientNo           = config['clients']
      self.requests          = config['requests']
      self.clientTimeout     = config['clientTimeout']
      self.scenario =  config['testcase']


  def getReplicafromConfiguration(scenario):

    if scenario["type"]=="delay":
      replicas =  new(diem_replica_byz.ReplicaByz,num=self.replicas_required)
    elif scenario["type"]=="normal":
      replicas =  new(diem_replica.Replica,num=self.replicas_required)
    
    return replicas

  def run():
    output("Creating {} DiemBFT Replicas".format(self.replicas_required))
    replicas=self.getReplicafromConfiguration(self.scenario)

    clients = new(Client, num=self.clientNo)
    output("Generating keys ")
    GenerateKey(self.replicas_required + 1).write_config()
    KeySets = [ Keys(i) for i in range(self.replicas_required + 1)]

    replicaInfos = {}
    replicaToPvtKeys = {}

    clientInfo = {}
    current_runner_process = self
    

    for i, replica in enumerate(replicas):
      KeySet = KeySets[i]
      replicaInfos[replica] = ReplicaInfo(replica, KeySet.public_key, i)
      replicaToPvtKeys[i] = KeySet.private_key

    for i in clients:
      clientInfo[i] = ClientInfo(KeySets[-1].public_key, i)

    for i, replica in enumerate(replicas):

      setup(replica, (
            i,
            replicaInfos, 
            self.faulty_replicas, 
            self.replicas_required,
            self.delta,
            replicaToPvtKeys[i],
            clientInfo
        ))
      

    start(replicas)

    for i, client in enumerate(clients):
      setup(client, (
        i,
        self.requests,
        self.clientTimeout,
        replicaInfos,
        KeySets[-1].private_key,
        KeySets[-1].public_key,
        self.faulty_replicas,
        current_runner_process
      ))
    
    start(clients)
    await(self.clientNo == 0)

    for _,replicaInfo in replicaInfos.items():
      output("sending close message to replica {}".format(replicaInfo.replicaID))
      send(("client_end"), to=replicaInfo.process)

  def receive(msg=("client_done",), from_=source):
    output("Received client done message ")
    self.clientNo -= 1



def getConfigs():
  configList = []
  configs = [
    {
      'faultyReplicas': 1,    # number of replicas which can go faulty
      'timeoutDelta'  : 2500,  # milliseconds
      'clients'       : 1,
      'requests'      : 10,
      'clientTimeout' : 5000,
      'testcase':{
        "type":"delay"
      }
    },
  ]

  return configs[0:1]





  
def printLedger(replicaIDs):
  # output("Printing Ledger  {} ".format(replicaIDs))
  for i in replicaIDs:
    _db = plyvel.DB('/tmp/diemLedger_{}/'.format(i), create_if_missing=True)
    _db_s = plyvel.DB('/tmp/diemLedger_speculate_{}/'.format(i), create_if_missing=True)
    print("\n\n Commits for replica ", i)
    ledger = []
    with _db.iterator() as it:
        for k,v in it:
            block = pickle.loads(v)[1]
            ledger.append([block.qc.vote_info.id, block.payload, block.id])
    
    ledger.sort(key=lambda x: x[1].payload)
    print(tabulate(ledger, headers=["Parent Block ID", "Block transaction", "Block ID"]))
    _db.close()


def clearLedger():
  ## cleanup 
  print("Cleaning up the ledger files ")
  files=glob.glob('/tmp/diemLedger_*')
  for file in files:
      x = shutil.rmtree(file)

def main():
  config(clock='Lamport')
  config(channel='fifo')
  
  configs = getConfigs()
  for configuration in configs:
    output("Processing configuration: {}".format(configuration))
    runner = new(RunDiemBFT)
    setup(runner, (configuration,))
    start(runner)
    replicaIDs = [ x for x in range(0,3*configuration["faultyReplicas"]+1)]
    print("Replica id to print {}".format(replicaIDs))
    #printLedger(replicaIDs)
    #clearLedger()