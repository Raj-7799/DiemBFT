from GenerateKey import GenerateKey
from Keys import Keys
from client import Client
import diem_replica
from replica_info import ReplicaInfo
from client_info import ClientInfo
import sys

print(sys.path)


import os
from diembft_logger import get_logger

diem_logger = get_logger(os.path.basename(__file__))

class RunDiemBFT(process): 
  def setup(config:dict): 
      self.faulty_replicas   = config['faultyReplicas']
      self.replicas_required = 3 * faulty_replicas + 1
      self.delta             = config['timeoutDelta']
      self.clientNo           = config['clients']
      self.requests          = config['requests']
      self.clientTimeout     = config['clientTimeout']
      

  def run():
    output("Creating {} DiemBFT Replicas".format(self.replicas_required))
    
    replicas = new(diem_replica.Replica, num=self.replicas_required)
    clients = new(Client, num=self.clientNo)
    output("Generating keys ")
    GenerateKey(self.replicas_required + 1).write_config()
    KeySets = [ Keys(i) for i in range(self.replicas_required + 1)]

    replicaInfos = {}
    replicaToPvtKeys = {}

    clientInfo = {}
    current_runner_process = self

    for i, replica in enumerate(replicas):
      KeySet = KeySets[i]
      replicaInfos[replica] = ReplicaInfo(replica, KeySet.public_key, i)
      replicaToPvtKeys[i] = KeySet.private_key

    for i in clients:
      clientInfo[i] = ClientInfo(KeySets[-1].public_key, i)

    for i, replica in enumerate(replicas):
      setup(replica, (
          i,
          replicaInfos, 
          self.faulty_replicas, 
          self.replicas_required,
          self.delta,
          replicaToPvtKeys[i],
          clientInfo
      ))

    start(replicas)

    for i, client in enumerate(clients):
      setup(client, (
        i,
        self.requests,
        self.clientTimeout,
        replicaInfos,
        KeySets[-1].private_key,
        KeySets[-1].public_key,
        self.faulty_replicas,
        current_runner_process
      ))
    
    start(clients)
    await(self.clientNo == 0)

    for _,replicaInfo in replicaInfos.items():
      output("sending close message to replica {}".format(replicaInfo.replicaID))
      send(("client_end"), to=replicaInfo.process)

  def receive(msg=("client_done",), from_=source):
    output("Received client done message ")
    self.clientNo -= 1


def main():
  config(clock='Lamport')
  config(channel='fifo')
  

  configs = [
    {
      'faultyReplicas': 2,    # number of replicas which can go faulty
      'timeoutDelta'  : 2500,  # milliseconds
      'clients'       : 1,
      'requests'      : 10,
      'clientTimeout' : 5000,
      'networkByzantine'     : False,
      'networkByzantineSeed' : 10,
      'processByzantine' : False,
      'processByzantineSeed' : 20
    }
  ]

  for configuration in configs:
    runner = new(RunDiemBFT)
    setup(runner, (configuration,))
    start(runner)
