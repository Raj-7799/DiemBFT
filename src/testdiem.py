# -*- generated by 1.0.14 -*-
import da
_config_object = {}
from client.client import Client
from diem_core import diem_replica

class RunDiemBFT(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, config, **rest_343):
        super().setup(config=config, **rest_343)
        self._state.config = config
        self._state.faulty_replicas = self._state.config['faultyReplicas']
        self._state.replicas_required = ((3 * self._state.faulty_replicas) + 1)
        self._state.delta = self._state.config['timeoutDelta']
        self._state.clients = self._state.config['clients']
        self._state.requests = self._state.config['requests']
        self._state.clientTimeout = self._state.config['clientTimeout']

    def run(self):
        self.output('Spawning replicas')
        replicas = self.new(diem_replica.Replica, num=self._state.replicas_required)
        self._state.clients = self.new(Client, num=self._state.clients)
        for (i, replica) in enumerate(replicas):
            other_replicas = [r for r in replicas if (not (r == replica))]
            self._setup(replica, (i, other_replicas, self._state.faulty_replicas, self._state.replicas_required, self._state.delta))
            self._start(replica)
        for (i, client) in enumerate(self._state.clients):
            self._setup(self._state.clients, (i, self._state.requests, self._state.clientTimeout, replicas))
        self._start(self._state.clients)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'clock': 'Lamport', 'channel': 'reliable'}

    def run(self):
        configs = [{'faultyReplicas': 1, 'timeoutDelta': 500, 'clients': 1, 'requests': 4, 'clientTimeout': 5000}]
        for configuration in configs:
            runner = self.new(RunDiemBFT)
            self._setup(runner, (configuration,))
            self._start(runner)
