# -*- generated by 1.1.0b15 -*-
import da
_config_object = {}
from GenerateKey import GenerateKey
from Keys import Keys
from client import Client
import diem_replica
from replica_info import ReplicaInfo
from client_info import ClientInfo
import sys
sys.path.insert(0, '/home/madara/sbu/cse535/distalgo/')
print(sys.path)

class RunDiemBFT(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([])

    def setup(self, config, **rest_471):
        super().setup(config=config, **rest_471)
        self._state.config = config
        self._state.faulty_replicas = self._state.config['faultyReplicas']
        self._state.replicas_required = ((3 * self._state.faulty_replicas) + 1)
        self._state.delta = self._state.config['timeoutDelta']
        self._state.clients = self._state.config['clients']
        self._state.requests = self._state.config['requests']
        self._state.clientTimeout = self._state.config['clientTimeout']

    def run(self):
        self.output('Creating {} DiemBFT Replicas'.format(self._state.replicas_required))
        replicas = self.new(diem_replica.Replica, num=self._state.replicas_required)
        self._state.clients = self.new(Client, num=self._state.clients)
        self.output('Generating keys ')
        GenerateKey((self._state.replicas_required + 1)).write_config()
        KeySets = [Keys(i) for i in range((self._state.replicas_required + 1))]
        replicaInfos = {}
        replicaToPvtKeys = {}
        clientInfo = {}
        for (i, replica) in enumerate(replicas):
            KeySet = KeySets[i]
            replicaInfos[replica] = ReplicaInfo(replica, KeySet.public_key, i)
            replicaToPvtKeys[i] = KeySet.private_key
        for i in self._state.clients:
            clientInfo[i] = ClientInfo(KeySets[(- 1)].public_key, i)
        for (i, replica) in enumerate(replicas):
            self._setup(replica, (i, replicaInfos, self._state.faulty_replicas, self._state.replicas_required, self._state.delta, replicaToPvtKeys[i], clientInfo))
        self._start(replicas)
        for (i, client) in enumerate(self._state.clients):
            self._setup(client, (i, self._state.requests, self._state.clientTimeout, replicaInfos, KeySets[(- 1)].private_key))
        self._start(self._state.clients)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([])
    _config_object = {'clock': 'Lamport', 'channel': 'reliable'}

    def run(self):
        configs = [{'faultyReplicas': 1, 'timeoutDelta': 2500, 'clients': 1, 'requests': 4, 'clientTimeout': 5000, 'networkByzantine': False, 'networkByzantineSeed': 10, 'processByzantine': False, 'processByzantineSeed': 20}]
        for configuration in configs:
            runner = self.new(RunDiemBFT)
            self._setup(runner, (configuration,))
            self._start(runner)
