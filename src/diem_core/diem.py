# -*- generated by 1.1.0b15 -*-
import da
PatternExpr_187 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping')])
_config_object = {}

class Replica(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_187, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_186])])

    def setup(self, other_replicas, faulty_replica_count, replica_count, messages, delta, **rest_197):
        super().setup(other_replicas=other_replicas, faulty_replica_count=faulty_replica_count, replica_count=replica_count, messages=messages, delta=delta, **rest_197)
        self._state.other_replicas = other_replicas
        self._state.faulty_replica_count = faulty_replica_count
        self._state.replica_count = replica_count
        self._state.messages = messages
        self._state.delta = delta
        pass

    def run(self):
        self.output('YO STARTING')
        self.send('Ping', to=self._state.other_replicas)
        super()._label('_st_label_180', block=False)
        _st_label_180 = 0
        while (_st_label_180 == 0):
            _st_label_180 += 1
            if (self._state.replica_count < 0):
                _st_label_180 += 1
            else:
                super()._label('_st_label_180', block=True)
                _st_label_180 -= 1

    def _Replica_handler_186(self):
        self.output('Ponged!!!')
        self._state.replica_count -= 100
    _Replica_handler_186._labels = None
    _Replica_handler_186._notlabels = None
