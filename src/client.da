from collections import Counter
import os
from diembft_logger import get_logger
from collections import defaultdict
import client_request as cr

diem_logger = get_logger(os.path.basename(__file__))

class Client(process):
  def setup(clientID: int, requests: int, clientTimeout: int, replicaInfos, private_key:str, public_key, f: int):
    self.pID                 = clientID
    self.nReq                = requests
    self.timeout             = clientTimeout
    self.replicaInfos        = replicaInfos
    self.private_key         = private_key
    self.public_key          = public_key
    self.f                   = f
    self.responses           = defaultdict(list)
    self.pendingVerification = {}
    self.transactionMap = {}
  
  def run():
    output("Broadcasting messages to replicas")
    for j, i in enumerate(range(1, self.nReq + 1)):
      client_request = cr.ClientRequest(str(i), self, self.private_key, self.public_key)
      pendingVerification[client_request] = True
      
      for _, replicaInfo in self.replicaInfos.items():
        send(("request", client_request), to=replicaInfo.process)
      
    await(self.nReq == 0)
    output(self.transactionMap)


  def receive(msg=("Yo bro",), from_=source):    
    if source in self.replicaInfos:  
      replicaInfo = self.replicaInfos[source]
      output("Got message from replica ", replicaInfo.replicaID)
      self.nReq -= 1
    else:
      output("Received unknown message")
    
  def check_block_state(transaction):
    transaction_counts = Counter(self.pendingVerification[transaction])
    for bk_id, count in transaction_counts.items():
      if count == self.f + 1:
        output("Received f + 1 = {} messages for transaction {} and block_id {}".format(self.f + 1, transaction, bk_id))
        self.transactionMap[transaction] = bk_id
        self.nReq -= 1
        break

  def receive(msg=("transaction_committed", obj), from_=source):
    block_id, block = obj
    self.pendingVerification[block].append(block_id)
    check_block_state(block)
