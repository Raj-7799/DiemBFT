import BlockTree as bt

from client_info import ClientInfo
import mempool
import Message
from replica_info import ReplicaInfo
import Pacemaker as PM
import Safety as sf
import leader_election as le
import ProposalMsg as plm
import pickle
import sys
import os
import Util
import time
from collections import defaultdict


class Replica_Drop(process):
    def setup(replicaID: int, replicaInfos, faulty_replica_count: int, replica_count: int, delta: int, privateKey: str, clientInfos: "dict[int, ClientInfo]", specialArgs: dict):
        self.replicaID = replicaID
        self.replicaInfos = replicaInfos
        self.fCount = faulty_replica_count
        self.rCount = replica_count
        self.tDelta = delta
        self.privateKey = privateKey
        self.publicKey = get_replica_public_key(self.replicaID)
        self.clientInfos = clientInfos
        self.memPool = mempool.MemPool(self.OutputMempool)
        self.firstRequestProcess = False
        self.waiting = False
        self.timedOut = False
        

        self.blockTree = bt.BlockTree(self.fCount, self.replicaID, self.privateKey, get_replica_public_key(self.replicaID), self.memPool, client_response_handler,send_sync_message,self.OutputLoggerBlockTree)
        self.safety = sf.Safety(blockTree, get_replica_public_keys(), self.replicaID,self.OutputLoggerSafety)
        self.paceMaker = PM.Pacemaker(self.safety, self.blockTree, self.tDelta, self.fCount, pacemaker_broadcast_timeout, self.replicaID,self.OutputLoggerPacemaker)
        self.leaderElection = le.LeaderElection(self.fCount, self.paceMaker, self.blockTree._ledger, get_replica_ids(), self.replicaID,self.OutputLeaderElection)


        self.pending_blocks=defaultdict(list)

        self.OutputReplica("__init__")
    

 
    def OutputLoggerPacemaker(log):
        output("[Pacemaker][ReplicaID-{}][{}]".format(self.replicaID,log))

    def OutputLoggerSafety(log):
        output("[Safety][ReplicaID-{}][{}]".format(self.replicaID,log))

    def OutputLoggerBlockTree(log):
        output("[BlockTree][ReplicaID-{}][{}]".format(self.replicaID,log))

    def OutputLeaderElection(log):
        output("[LeaderElection][ReplicaID-{}][{}]".format(self.replicaID,log))

    
    def OutputReplica(log):
        output("[Replica][Replica_Drop-{}][{}]".format(self.replicaID,log))

    def OutputMempool(log):
        output("[Mempool][ReplicaID-{}][{}]".format(self.replicaID,log))

    def broadcast_helper(method, message):
        for _, replicaInfo in self.replicaInfos.items():
            send((method, message), to=replicaInfo.process)

    def client_response_handler(request):
        send(("transaction_committed", request), to=request[1].source)

    def get_replica_info(replicaID):
        for _, replicaInfo in self.replicaInfos.items():
            if replicaInfo.replicaID == replicaID:
                return replicaInfo
    
    def get_replica_ids():
        replicaIDs = []
        for _, replicaInfo in self.replicaInfos.items():
            replicaIDs.append(replicaInfo.replicaID)
        return replicaIDs

    def pacemaker_broadcast_timeout(tmo_message):
        self.OutputReplica("[pacemaker_broadcast_timeout] Entry")
        SIGNED_MSG = Util.sign_object_dup(tmo_message, self.privateKey)
        self.broadcast_helper("process_timeout_msg", [tmo_message, SIGNED_MSG])
        self.OutputReplica("[pacemaker_broadcast_timeout] Exit")


    def get_replica_public_key(replicaID):
        replicaInfo = get_replica_info(replicaID)
        return replicaInfo.public_key
    
    def get_replica_public_keys():
        keys = []
        for _, replicaInfo in self.replicaInfos.items():
            keys.append(replicaInfo.public_key)

        return keys

    def run():
        await(some(received(("client_end"))))


    def process_certificate(qc):
        self.OutputReplica("[process_certificate] Entry Processing QC {} for vote_info {} at round {}".format( qc, qc.vote_info.id, self.paceMaker.current_round))
        if qc.verify_self_signature_qc():
            self.blockTree.process_qc(qc)
            self.leaderElection.update_leaders(qc)
            self.paceMaker.advance_round_qc(qc)
            self.OutputReplica("[process_certificate] Exit Processing QC {} for vote_info {} at round {}".format( qc, qc.vote_info.id, self.paceMaker.current_round))
        else:
            self.OutputReplica("[process_certificate] Exit QC invalid")

    #Psuedocode
    #process new round event(last tc)
    def process_next_round_event(last_tc):
        self.OutputReplica("[process_next_round_event] Entry")
        #Psuedocode
        #if u = LeaderElection.get leader(Pacemaker.current round) then
        if self.replicaID == leaderElection.get_leader(paceMaker.current_round):
            #Psuedocode
            #// Leader code: generate proposal.
            # b ←Block-Tree.generate block( MemPool.get transactions(),Pacemaker.current round )
            
            transaction = memPool.get_transactions()

            if not transaction:
                self.waiting = True
                self.timedOut = False
                self.OutputReplica("Waiting for transactions in mempool")
                self.OutputReplica("Mempoool state {}".format( self.memPool.print()))
                --request
                await(self.waiting == False)
            
            if self.timedOut:
                self.OutputReplica("Timed out while waiting for transaction")
                return

            if transaction is None:
                self.waiting = False
                self.timedOut = False
                transaction = memPool.get_transactions()
                self.OutputReplica("Transaction after waiting {}".format( transaction))

            block = blockTree.generate_block(transaction, paceMaker.current_round)
            self.OutputReplica("Generated block with block_id {} for transaction {} at round {}".format( block.id, transaction, paceMaker.current_round))
            self.OutputReplica("Mempool state {}".format( self.memPool))
            proposal_msg = plm.ProposalMsg(block, last_tc, blockTree.high_commit_qc, self.privateKey, self.publicKey)
            self.OutputReplica("Broadcasting proposal message for block with block_id {} at round {}".format( block.id, paceMaker.current_round))
            #Psuedocode
            #broadcast ProposalMsg〈b,last tc,Block-Tree.high commit qc〉
            for _, replicaInfo in self.replicaInfos.items():
                self.OutputReplica("Broadcasting process_proposal_msg of round {} for replica {}".format(proposal_msg.block.roundNo, replicaInfo.replicaID))
                # =========================> Changes Fault Injection START
                if not (proposal_msg.block.roundNo == self.specialArgs["faultyRound"] and (replicaInfo.replicaID == 0 or replicaInfo.replicaID ==1)):#Droppign proposal messages for replica 0 and 1
                    SIGNED_MSG = Util.sign_object_dup(proposal_msg, self.privateKey)
                    send(("process_proposal_msg", [proposal_msg, SIGNED_MSG]), to=replicaInfo.process)
                else:
                    self.OutputReplica("Dropping proposal messages for Round {} fro replica {}".format(proposal_msg.block.roundNo, replicaInfo.replicaID))
                # =========================>Changes Fault Injection END

        self.OutputReplica("[process_next_round_event] Exit")


    def receive(msg=("request", cmd), from_=source):
        self.OutputReplica("[request] Enty Received client request. Inserting cmd {} into mempool of replica".format(cmd))
        if not Util.verify_message_dup(cmd.signature, self.clientInfos[source].public_key):
            self.OutputReplica("Received forged client signature")
            self.OutputReplica("[request] Exit") 
            return
        else:
            self.OutputReplica("[request] Client signature looks good")
        
        self.OutputReplica("[request] Waiting state {}".format( self.waiting))
        self.waiting = False

        self.memPool.insert_command(cmd)
        if not self.firstRequestProcess:
            if self.replicaID == 0:
                self.paceMaker.advance_round_qc(self.blockTree._high_qc)
        
            self.firstRequestProcess = True
            process_next_round_event(None)

        self.OutputReplica("[request] Exit") 

    def receive(msg=("process_proposal_msg", P), from_=source):
        
        
        self.OutputReplica('[process_proposal_msg] Entry') 

        if not Util.verify_message_dup(P[1], self.replicaInfos[source].public_key):
           self.OutputReplica("[process_proposal_msg]  Validation Failed")
           return
        else:
            self.OutputReplica("[process_proposal_msg] Validation Successful")
        P=P[0]
        self.OutputReplica("[process_proposal_msg] Received proposal msg with Block ID : {} at round {}".format(P.block.id, self.paceMaker.current_round))

        if P is None:
            self.OutputReplica("[process_proposal_msg] Received a null proposal")
            return

        self.OutputReplica('[process_proposal_msg] Processing with qc as  {} '.format(P.block.qc))

        
        self.memPool.markState(P.block.payload)
        #Psuedocode 
        #process certificate qc(P.block.qc)
        self.process_certificate(P.block.qc)
        #Psuedocode
        #process certificate qc(P.high commit qc)
        self.process_certificate(P.high_commit_qc)
        #Psuedocode
        #Pacemaker.advance round tc(P.last round tc)
        self.paceMaker.advance_round_tc(P.last_round_tc)
        #Psuedocode
        #round ←Pacemaker.current round
        current_round = self.paceMaker.current_round
        #Psuedocode
        #leader ←LeaderElection.get leader(current round)
        current_leader = self.leaderElection.get_leader(current_round)

        sourceReplica = self.replicaInfos[source]
        #Psuedocode
        #if P.block.round != round ∨P.sender != leader ∨P.block.author != leader then
        if P.block.roundNo != current_round or sourceReplica.replicaID != current_leader or P.block.author != sourceReplica.replicaID:

            self.OutputReplica("[process_proposal_msg] Exit Inconsistency {} {} {} {} {} {} {}".format( P.block.id, P.block.roundNo, current_round, sourceReplica.replicaID, current_leader, P.block.author, sourceReplica.replicaID))
            return
        #Psuedocode
        #Block-Tree.execute and insert(P) // Adds a new speculative state to the Ledger
        blockTree.execute_and_insert(P.block,self.paceMaker.current_round)
        #Psuedocode
        #vote msg ←Safety.make vote(P.block,P.last round tc
        vote_message = self.safety.make_vote(P.block, P.last_round_tc)

        #Psuedocode 
        # if vote msg != ⊥ then
        #   send vote msg to LeaderElection.get leader(current round + 1
        if vote_message:
            nextLeaderID = self.leaderElection.get_leader(current_round + 1)
            self.OutputReplica("[process_proposal_msg] Next leader for the round {} is at replica {}".format( current_round + 1, nextLeaderID))
            nextLeaderInfo = None
            
            for _,replicaInfo in self.replicaInfos.items():
                if replicaInfo.replicaID == nextLeaderID:
                    nextLeaderInfo = replicaInfo
                    break
            
            self.OutputReplica("[process_proposal_msg] Exit Sending vote message to next leader : {} for block ID {} at round {}".format( nextLeaderInfo.replicaID, P.block.id, self.paceMaker.current_round))
            SIGNED_MSG = Util.sign_object_dup(vote_message, self.privateKey)
            send(("process_vote_msg", [vote_message, SIGNED_MSG]), to=nextLeaderInfo.process)
        else:
            self.OutputReplica("[process_proposal_msg] Exit Unable to make vote for block {}".format( P.block.id))

    def receive(msg=("process_vote_msg", M), from_=source):
        self.OutputReplica('[process_vote_msg] Entry Inside process_vote_msg receive handler')

        #Validating the vote message received from other validators(replicas)
        if not Util.verify_message_dup(M[1], self.replicaInfos[source].public_key):
           self.OutputReplica("[process_vote_msg] Validation Failed")
        else:
            self.OutputReplica("[process_vote_msg] Validation Successful")
        
        M=M[0]
        self.OutputReplica("[process_vote_msg] Received vote message from {} for block {} at round {}".format( M.sender, M.vote_info.id, self.paceMaker.current_round))
        #Psuedocode
        #qc ← Block-Tree.process vote(M)
        qc = self.blockTree.process_vote(M)
        #Psuedocode
        # if qc != ⊥ then
        #     process certificate qc(qc)
        #     process new round event(⊥)

        if qc:
            self.OutputReplica("[process_vote_msg] Formed QC from votes at round {}".format( self.paceMaker.current_round))
            self.process_certificate(qc)
            self.process_next_round_event(None)
            self.OutputReplica("[process_vote_msg] Exit")

    def receive(msg=("process_timeout_msg", M), from_=source):
        self.OutputReplica('[process_timeout_msg] Entry Inside process_timeout_msg receive handler')
        if not Util.verify_message_dup(M[1], self.replicaInfos[source].public_key):
           self.OutputReplica("[process_timeout_msg] Exit Validation Failed")
           return
        else:
            self.OutputReplica("[process_timeout_msg] Validation Successful")        
        M=M[0]

        if self.waiting:
            self.waiting = False
            self.timedOut = True
        #Psuedocode
        #process certificate qc(M.tmo info.high qc)
        self.process_certificate(M.tmo_info.high_qc)
        #Psuedocode
        #process certificate qc(M.high commit q)
        self.process_certificate(M.high_commit_qc)
        #Psuedocode
        #Pacemaker.advance round tc(M.last round tc)
        self.paceMaker.advance_round_tc(M.last_round_tc)
        #Psuedocode
        #tc ←Pacemaker.process remote timeout(M)
        tc = self.paceMaker.process_remote_timeout(M)
        if tc:
            self.OutputReplica("[process_timeout_msg] Processing TC  ")
            # In paper Pacemaker.advance_round(tc)
            # it should be Pacemaker.adbance_round_tc(tc)
            
            self.paceMaker.advance_round_tc(tc)
            #Psuedocode
            #process new round event(tc)
            self.process_next_round_event(tc)
        self.OutputReplica("[process_timeout_msg] Exit")           
    
    def receive(msg=("client_end"), from_=source):
        self.OutputReplica("[client_end] Received message to close the replica")
    
    def receive(msg=("validate", block_id), from_=source):         
        self.OutputReplica("[validate] Entry Received validate")
        block = self.blockTree._ledger.committed_block(block_id)
        send(("validation_block", block), to=source)
        self.OutputReplica("[validate] Exit")

    

    def send_sync_message(sync_status_object):
        self.OutputReplica("[send_sync_message] Entry broadcast message")
        for _, replicaInfo in self.replicaInfos.items():
            send(("SyncMsgRequest",sync_status_object),to=replicaInfo.process)
        self.OutputReplica("[send_sync_message] Exit")


    
    def receive(msg=("BlockSyncMessage",M), from_=source):
        self.OutputReplica("[BlockSyncMessage] Entry received block id {} ".format(M[0].id))
        if source==self.replicaID:
            self.pending_blocks[M[0].id]+=1
        
            self.blockTree.pending_block_tree.add(M[0].qc.vote_info.id,M[0])
            self.blockTree._ledger.speculate(M[0].qc.vote_info.id,M[0])

            if len(self.pending_blocks[M[0].id]) == 2*self.fCount + 1:
                self.blockTree._ledger.commit(M[0].id)
                self.paceMaker.current_round=M[0].roundNo
                self.OutputReplica("[BlockSyncMessage] Broadcast SyncMsgRequest ")
                if M[1] != M[0].id:
                    for _, replicaInfo in self.replicaInfos.items():
                        send(("SyncMsgRequest",(self.blockTree._ledger.get_last_commited,self.replicaID)), to=replicaInfo.process)

        self.OutputReplica("[BlockSyncMessage] Exit pending vote {} for sync block {}".format(len(self.pending_blocks[M[0].id]),M[0].id))



    def receive(msg=("SyncMsgRequest",M), from_=source):

        self.OutputReplica("[SyncMsgRequest] Entry ")
        if source != M[1]:
            next_block =  self.blockTree._ledger.get_next_block(M[0])
            last_committed_block=self.blockTree._ledger.last_committed_block
            send(("BlockSyncMessage",(next_block,last_committed_block)),to=source)
        self.OutputReplica("[SyncMsgRequest] Exit")



