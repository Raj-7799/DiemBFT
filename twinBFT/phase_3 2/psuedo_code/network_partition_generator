Module NetworkPartitionGenerator{
  
  Procedure generatePartitionRec(
    index, //index of node in the list
    node_list, // the list of nodes
    current_partition, // current partition
    partitions // Final list of all possible partitions
  ) {
    if index == len(node_list):
      partitions <- partitions ∪ current_partition
    else:
      // either include the current value to existing partition
      current_partition[lastElement] <- current_partition[lastElement] ∪ node_list[index]
      generatePartitionRec(index+1, node_list, current_partition, partitions)
      current_partition[lastelement].pop()

      // else create its own new partition
      new_partition=∅
      new_partition <- new_partition ∪ node_list[index]
      current_partition <- current_partition ∪ new_partition
      generatePartitionRec(index+1, node_list, current_partition, partitions)
      current_partition.pop()
  }

  Function prune_duplicate_partition(
    partitions // list of partitions to be pruned
  ) {
    // prune scenarios such as [_, _, _ | _, _] and [_, _ | _, _, _]
    // Sort partition by their partition sizes
    for p in partitions:
      p.sort()
    
    // converts paritions into [_, _, _ | _, _] and [_, _, _ | _, _]
    // resulting unique partion set
    unique_partitions <- {}
    
    // iterate over all generate partition
    for p in partitions:
      key <- ∅
      for np in p:
        key <- key ∪ |np|

      // key formed for example above will be "32"
      if key not in unqiue_partitions
        unique_partitions[key] <- p
    
    // take only the values
    partitions <- unique_partitions.values()
    return partitions
  }

  
  Function get_partition_scenarios(
    N, // Total Number of nodes considering twins
    F // Number of Faulty nodes
  ) {
    // generate a node list
    node_list <- [i for i in 0...N]
    // initialize a empty set
    current_partition <- ∅
    // fill up the initial value
    current_partition <- current_partition ∪ [arr[0]]
    // resulting partitions
    partitions <- ∅
    // generate using backtracking
    generatePartitionRec(1, node_list, current_partition, partitions)
  
    // pruned partitions
    partitions <- prune_duplicate_partition(partitions)
    // get partitions that contain majority
    majority_partitions <- get_majority_partitions(partitions, F)
    // return partitions and majority partitions
    return partitions, majority_partitions
  }

  Function get_majority_partitions(
      partitions, // list of all pruned partitions
      F // number fo faulty replicas
    ){
      majority_partitions = ∅
      // iterate over all partitions
      for p in partitions:
        // if length of first partition is greater than equal to super majority
        if len(p[0]) >= (2 * F + 1):
          majority_partitions <- majority_partitions ∪ p
        
      return majority_partitions
  }
}