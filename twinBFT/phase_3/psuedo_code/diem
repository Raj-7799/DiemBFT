Module Diem {
 id
 keys
 leader_assignments
 NetworkPlaygroudNode // reference of network playground for relaying messages
 broadcast <- -1

 Module LeaderElection{
  leader_assignments // dictionary of leader assignments

   Function get_leader(round) {
    return leader_assignments[round]
   }
 }

 Module Main {
  // struct for message
  Message {
   payload,
   round,
   sender,
   receiver
  }

  // this procedure has to be used when sending any messages from diem
  Procedure sendMessage(payload, round, receiver) {
   // payload contains the message payload
   // round contains the max of round of original message or current round
   // receiver is the receiver (could be a node or broadcast type)
   M <- Message(payload, max(round, PaceMaker.current_round), id, receiver)
   send(NetworkPlaygroudNode, M)
  }
 }

 Module Mempool{
   current_transaction = 0
  //The get_transaction method is overidden to get propose dummy blocks
  Procedure get_transactions() {
    // payload contains the message payload
    // round contains the max of round of original message or current round
    // receiver is the receiver (could be a node or broadcast type)
    current_transaction <- current_transaction + 1
    return str(id) + "-" + str(current_transaction)
   }
  }
}