// acts as central hub for message interception
Module NetworkPlaygroud{
  Partition_Config, // List of Partition configurations for each round
  number_of_nodes, // count of total number of nodes excluding twins (3 * F + 1)
  total_nodes, // count of nodes excluding twin (4 * F + 1)
  twin_nodes  // set of which nodes are twin
  broadcast <- -1
  max_round <- 0
  // the node_states kepps track of the count of each message for each sender
  // used for determining the network partition for a given round
  // is incremented whenever a message from a sender for a round is received
  node_states <- {} //dictionary with node as key and state as value
  
  Func Main() : EventLoop{
      loop : Wait for next event M; Main.start_event_processing(M)
      Procedure start_event_processing(M) {
          onReceive(M)
      }
  }

  // event handler
  Procedure onReceive(M)
  {
    // get the sender id
    senderID <- M.senderID
    // get the receiver id
    receiverID <- M.receiverID
    num_nodes <- number_of_nodes
    ScenarioExecutor.OnReceive(M)
    // if the receiver is to broadcast message
    if(receiverID == broadcast)
      for nodeID in num_nodes
        // send message to both the receiver and its twin which will be 3 * f + 1 + receiverID as per our logic
        twinNodeID <- nodeID + number_of_nodes
        // same partition send message to receiver
        if same_partition(senderID, nodeID)
          send(M, M.payload, nodeID)
        // same partition then send message to receiver's twin
        if same_partition(senderID, twinNodeID)
          send(M, M.payload, twinNodeID)
    else
      twinReceiverID <- M.receiverID + number_of_nodes
      if same_partition(senderID, receiverID)
        send(M, M.payload, receiverID)
      if same_partition(senderID, twinReceiverID)
        send(M, M.payload, twinReceiverID)
    
    // increment the node state for the sender and the round
    node_states[senderID][round] <- node_states[senderID][round] + 1
  }
 
  Function same_partition(
    M, //Message for which partition should be checked
    sender //sender of message
    receiver //receiver of message
    ) {
      if receiver > total_nodes
          return False
      
      round <- M.round
      // choose the network-partition set for the given round
      current_partitons <- Partition_Config[round]
      if node_states[sender][round] != ∅:
          // choose the partition based on min of the count of messages for that round
          // or the size of partition set
          partition_id <- min{ node_states[sender][round], |current_partitons| - 1 }
      else:
         // round encountered for the first time, choose the very first partition
          node_states[senderID][round] = 0
          partition_id <- 0
      
      // check if the sender and receiver belong to the same parititon
      for partition in current_partitons[partition_id]:
          if (sender ∈ partition) && (receiver ∈ partition):
              return True
      
      return False
    }
}
