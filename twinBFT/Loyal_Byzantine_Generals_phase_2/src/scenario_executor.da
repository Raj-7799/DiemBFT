import os
import shutil
import sys
import json

sys.path.append('../config')

from object_types import FailType, Failure, FailureConfig, MsgType

from client import Client
from config import configs
from cryptography import Cryptography
from validator import Validator
from network_playground import NetworkPlayground

class ScenarioExecutor(process):
        
    def setup(config, config_id):
        self.nvalidators = int(config['nvalidators'])
        self.nclients = int(config['nclients'])
        self.nfaulty = int(config['nfaulty'])
        self.twin_config=config['twin_config']
        self.round_leaders =self.twin_config['round_leaders'] 
        config['round_leaders']=self.round_leaders
        print("ScenarioExecutor ")
        del config['twin_config']

    def run():

        private_keys_validators = {}
        public_keys_validators = {}
        private_keys_clients = {}
        public_keys_clients = {}

        os.makedirs('../logs/config' + str(config_id))
        os.makedirs('../ledgers/config' + str(config_id))

        validators = list(new(Validator, num=nvalidators))
        clients = new(Client, num=nclients)




        ntwins = int(twin_config["number_of_twins"])

        twins =  new(Validator,num=ntwins)


        network_playground =  new(NetworkPlayground,num=1)
        config['network_playground']=network_playground

        

        for v in validators:
            private_key, public_key = Cryptography.generate_key()
            private_keys_validators[v] = private_key
            public_keys_validators[v] = public_key

        twin_node_cache = {}
        for i, v in enumerate(twins,start=len(validators)):
            private_keys_validators[v]=private_keys_validators[validators[i-len(validators)]]
            public_keys_validators[v]=public_keys_validators[validators[i-len(validators)]]
            twin_node_cache[i]=v


        print(private_keys_validators)

        for c in clients:
            private_key, public_key = Cryptography.generate_key()
            private_keys_clients[c] = private_key
            public_keys_clients[c] = public_key


        all_nodes = list(validators)+list(twins)
        for i, v in enumerate(validators):
            setup({v}, (config, config_id, i, all_nodes, list(clients),
                        private_keys_validators[v], public_keys_validators, public_keys_clients))

        
        for i, v in enumerate(twins,start=len(validators)):
            print("enumberate : ",i,v)
            print("validators[i-len(validators)] ",validators[i-len(validators)])
            setup({v}, (config, config_id, i, all_nodes, list(clients),
                        private_keys_validators[v], public_keys_validators, public_keys_clients))



        for i, c in enumerate(clients):
            setup({c}, (config, config_id, i, list(validators),
                        private_keys_clients[c], public_keys_validators))

        

        setup(network_playground, (twin_config,all_nodes,nvalidators ,public_keys_validators, public_keys_clients))

        start(network_playground)
        start(validators)
        start(twins)
        start(clients)

        # await(each(c in clients, has=received(('Done',), from_=c)))
        output("All clients done, informing all validators.", config_id)
        # send(('Done',), to=validators)


    def is_config_valid(config):
        if int(config['nvalidators']) < (3 * int(config['nfaulty']) + 1):
            print(
                "Number of validators should be more than thrice of number of faulty validators.")
            return False
        if (int(config['nfaulty']) > int(config['exclude_size'])) or (int(config['exclude_size']) > 2 * int(config['nfaulty'])):
            print(
                "Exlude size should be between nfaulty and 2*nfaulty")
            return False
        return True


def read_config(file):
    """
        Reading Config file 
    """
    config =  open(file)
    
    twin_config =  json.load(config)
    num_of_nodes = twin_config["number_of_nodes"]
    num_of_twins =  twin_config["number_of_twins"]
    print(num_of_nodes)
    print(num_of_twins)
    return twin_config


def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    #file = "../config/twinconfig.json"
    file = "../config/twinconfig_all_good.json"

    twin_config = read_config(file)
    number_of_nodes =  int(twin_config["number_of_nodes"])


    config = {
        "nvalidators": number_of_nodes,
        "nclients" : 1,
        "nfaulty": (number_of_nodes-1)/3,
        "twin_config": twin_config,
        'sleeptime': 1,
        'clienttimeout': 20,
        'nclientops': 1,
        'delta': 2,
        'window_size': 3,
        'exclude_size': 0,
        'failure_config': FailureConfig(
            failures=[],
            seed=637713655
        )
        
    }

    p = new(ScenarioExecutor)
    setup(p, (config, 0))
    start(p)


    # config_id = 0
    # for config in configs:
    #     if not is_config_valid(config):
    #         output("The provided config", config,
    #             "is not valid. Skipping this config.")
    #         continue
    #     p = new(RunDiemBFT)
    #     setup(p, (config, config_id))
    #     start(p)
    #     config_id += 1
